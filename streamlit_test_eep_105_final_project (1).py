# -*- coding: utf-8 -*-
"""Streamlit Test EEP 105 Final Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l5caeSjt4BEv7uKWjd83NNYHUa7KZZ4y
"""

#Import packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# Motivation

**1) Why did you pick this country?**
	Chloe: I picked this country because my dad is from South Korea and I find its story of modernization really interesting. Korea has endured many centuries of hardship and developed a 빨리빨리 (pali pali) culture, a fast paced lifestyle that sees constant evolution and adaptations to new trends or innovations. Their 빨리빨리 way of life has led to a lot of innovation that has also had a large environmental impact. However, I know that Korean people really value sustainability and there are many sustainability initiatives in Korea to try and combat their climate impact. I think that South Korea being one of the top 10 countries in the data set for the yearly CO2 emissions from the Bloomberg case study was interesting. South Korea has a slightly smaller land mass than California, being the smallest country by far in the top 10 and the 8th largest population in the group. I think this data is fascinating because the country is so small with an extremely dense population and I wanted to look into the country further.

**2) What are some facts about CO2 emissions for that country?**
	South Korea’s CO₂ emissions have risen dramatically over the past 50 years, climbing from around 62 million metric tons in 1970. Then it peaked at about 671 million metric tons in 2018 before declining to roughly 574 million in 2023 (The Global Economy, 2025a). This shift is accompanied by the country’s rapid industrialization and economic growth, as well as changes in its energy sources. Coal accounted for over 80% of emissions in the 1960s, but by 2016 its share had dropped to about 50% (Index Mundi, 2025). In 2022, South Korea was responsible for about 1.65% of global fossil CO₂ emissions and ranked among the world’s top ten emitters (Worldometer, 2025), with per capita emissions of 11.09 metric tons, more than double the global average of 4.76 (The Global Economy, 2025b). South Korea has also been a pioneer in climate policy, launching the first nationwide emissions trading system in East Asia in the early 2010s (Wikipedia, 2025a). The COVID-19 pandemic triggered a 6.4% drop in emissions in 2020 due to reduced electricity generation, lower coal use, and decreased transportation demand (Wikipedia, 2025b). While emissions have fallen from their peak, South Korea still maintains one of the highest per capita carbon footprints despite their small land mass and smaller population size.
Sources:
“Climate Change in South Korea.” Wikipedia, 8 Aug. 2025. Wikipedia, https://en.wikipedia.org/w/index.php?title=Climate_change_in_South_Korea&oldid=1304907243
“Emissions Trading Scheme in South Korea.” Wikipedia, 5 May 2025. Wikipedia, https://en.wikipedia.org/w/index.php?title=Emissions_Trading_Scheme_in_South_Korea&oldid=1288863909.
“South Korea Carbon Dioxide (CO2) Emissions per Capita - Data, Chart.” TheGlobalEconomy.Com, https://www.theglobaleconomy.com/South-Korea/Carbon_dioxide_emissions_per_capita/. Accessed 10 Aug. 2025.
“South Korea CO2 Emissions.” Worldometer, https://www.worldometers.info/co2-emissions/south-korea-co2-emissions/. Accessed 10 Aug. 2025.

“South Korea Economic Indicators.” TheGlobalEconomy.Com, https://www.theglobaleconomy.com/south-korea/. Accessed 10 Aug. 2025.

# Main Research Questions
1. How have global CO2 emission rates changed over time? In particular for South Korea (SK), and how does SK compare to other countries?

South Korea’s CO₂ emissions are substantial and shocking for a country of its size. On a per capita basis, South Koreans emit about 11.09 metric tons of CO₂ annually, more than double the global average of 4.76 metric tons (The Global Economy, 2025b). Despite some improvements in carbon intensity, with CO₂ emissions per dollar of GDP decreasing from 0.47 kg to 0.22 kg, South Korea still remains slightly above the global average (The Global Economy, 2025c). The country’s heavy reliance on coal power contributes significantly to its emissions, with coal-related emissions per capita among the highest in the G20, at over three tons per person (Ember Climate, 2024). Globally, South Korea ranks among the top ten CO₂ emitters, alongside countries like Germany and Japan (Reuters, 2024). While recent years have seen a modest decline in emissions, the country remains a major player in the global carbon footprint.


2. Are CO2 emissions in SK, global temperatures, and natural disaster rates in the US associated?

There is strong evidence linking South Korea’s rising CO₂ emissions with increased temperatures and the severity of natural disasters. For example, in March 2025, the country experienced its largest wildfire on record, which scientists attribute to climate change doubling the likelihood of such events and increasing their intensity by about 15% (Reuters, 2025a). Record-high temperatures, roughly 2°C above historical averages, combined with dry conditions, contributed to the wildfire’s severity (The Guardian, 2025). Additionally, South Korea’s recent floods, including the heavy monsoon rains of 2023—the most intense in 115 years—have been linked to climate change, which is causing more extreme and concentrated rainfall events (Wikipedia, 2025a). Average temperatures have also steadily increased, with 2023 and 2024 setting new records, reaching nearly 2°C above long-term averages (Wikipedia, 2025b). These patterns illustrate how human-driven CO₂ emissions are contributing to a warmer climate, which in turn fuels more frequent and severe natural disasters in South Korea.

References:

Ember Climate. (2024). Australia and South Korea remain the top two per capita coal power polluters. https://ember-climate.org/press-releases/australia-and-south-korea-remain-the-top-two-per-capita-coal-power-polluters

Reuters. (2024). Top 10 country emitters discharged record amount CO2. https://www.reuters.com/markets/commodities/top-10-country-emitters-discharged-record-amount-co2-2023-2024-06-21

Reuters. (2025a). South Korea’s deadly fires made twice likely by climate change, researchers say. https://www.reuters.com/sustainability/cop/south-koreas-deadly-fires-made-twice-likely-by-climate-change-researchers-say-2025-04-30

The Guardian. (2025). South Korea fires death toll rises: worst in history. https://www.theguardian.com/world/2025/mar/27/south-korea-fires-death-toll-rises-worst-in-history

The Global Economy. (2025a). Carbon dioxide emissions – South Korea. https://www.theglobaleconomy.com/south-korea/Carbon_dioxide_emissions

The Global Economy. (2025b). Carbon dioxide emissions per capita – South Korea. https://www.theglobaleconomy.com/South-Korea/Carbon_dioxide_emissions_per_capita

The Global Economy. (2025c). Carbon intensity – South Korea. https://www.theglobaleconomy.com/South-Korea/carbon_intensity

Wikipedia. (2025a). 2023 South Korea floods. https://en.wikipedia.org/wiki/2023_South_Korea_floods

Wikipedia. (2025b). Geography of South Korea. https://en.wikipedia.org/wiki/Geography_of_South_Korea

# What are the data?

**This case study uses five datasets showing:**
1. Yearly CO2 emissions by country (1751-2014):
    
    https://raw.githubusercontent.com/opencasestudies/ocs-bp-co2-emissions/master/data/raw/yearly_co2_emissions_1000_tonnes.xlsx
2. GDP per capita in terms of yearly percentage growth per capita by country (1801-2019):
    
    https://raw.githubusercontent.com/opencasestudies/ocs-bp-co2-emissions/master/data/raw/gdp_per_capita_yearly_growth.xlsx

3. Energy use per person in terms of kg of oil equivalents per capita by country (1990-2023):
   
    https://raw.githubusercontent.com/opencasestudies/ocs-bp-co2-emissions/master/data/raw/energy_use_per_person.xlsx
4. South Korea Disaster Data:
    
    https://raw.githubusercontent.com/opencasestudies/ocs-bp-co2-emissions/master/data/raw/disasters.csv

5. South Korea Temperature Data (1901-2022):
    
    https://raw.githubusercontent.com/opencasestudies/ocs-bp-co2-emissions/master/data/raw/temperature.csv

# What does it measure?

**1. Yearly CO2 emissions by country (1751-2014):**
The year-over-year percentage change in gross domestic product per person for each country. Units: percent (%) change from the previous year.

**2. GDP per capita in terms of yearly percentage growth per capita by country (1801-2019):**
The year-over-year percentage change in gross domestic product per person for each country. Units: percent (%) change from the previous year.

**3. Energy use per person in terms of kg of oil equivalents per capita by country (1990-2023):**
The average annual energy consumption per person, expressed in kilograms of oil equivalent (kgOE). This is a standardized unit to compare different energy sources.

**4. South Korea disaster data**
Number and type of natural disasters in South Korea by year (e.g., floods, typhoons, droughts). Variables may include year, type of disaster, number of events, damage cost, and casualties.

**5. South Korea Temperature Data (1901-2022):**
Average yearly temperature in South Korea over time. Units: degrees Celsius (°C).

# What does a given value for the variables ofinterest mean?
**1. Yearly CO2 emissions by country (1751-2014):**
If South Korea’s value in 2010 is 573,000, that means it emitted 573 million tonnes of CO₂ that year. Higher values indicate greater emissions, often linked to industrial activity and energy use.

**2. GDP per capita in terms of yearly percentage growth per capita by country (1801-2019):**
 A value of 3.5 for 2005 means GDP per person grew 3.5% compared to 2004. Negative values mean an economic contraction per person (e.g., during recessions).

**3. Energy use per person in terms of kg of oil equivalents per capita by country (1990-2023):**
A value of 4,500 in 2015 means that, on average, each person used energy equivalent to 4,500 kg of oil that year. Higher values generally reflect higher industrialization or consumption

**4. South Korea Disaster Data:**
If in 2007 the flood count is 3, it means three flood events were recorded in South Korea that year. Damage cost variables (if present) indicate the economic loss in specified currency units

**5. South Korea Temperature Data (1901-2022):**
A temperature of 13.2°C in 2010 means the average temperature across all months of 2010 was 13.2°C. Rising averages over decades can indicate warming trends.

# Data Import
Below, we'll read in the data with the appropriate function (depending upon whether they're in Excel or CSV format), assign them a dataframe name, and print out a few of the rows to see what the dataframes look like.
"""

#Read in the data


df_co2 = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/yearly_co2_emissions_1000_tonnes.csv")
df_gdp = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/gdp_per_capita_yearly_growth.csv")
df_en = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/energy_use_per_person.csv")
df_nd = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/sk_natural_disaster_data.csv")
df_temp = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/sk_temp_data.csv")

#Yearly CO2 emissions by country (1751-2014):
df_co2.head()

#GDP per capita in terms of yearly percentage growth per capita by country (1801-2019):
df_gdp.head()

#Energy use per person in terms of kg of oil equivalents per capita by country (1990-2023):
df_en.head()

#SK data on natural disasters (1977-2025):
df_nd.head()

#SK data on temperature (1895-2019):
df_temp.head()

"""# Data Wrangling"""

# there are 192 rows of different countries and their CO2 emissoins values from 1751-2014
#some countries have missing data
#code below shows the years in our data
print(df_co2.columns)
column_names_list = list(df_co2.columns)
print(column_names_list)

#use .melt() to change data from wide to long, this makes the data a little more tidy
# changes the year columns into a single column called year with its corresponding values
# grabbing a random sample from the CO2 emissions data

CO2_emissions_long = pd.melt(
    df_co2,
    id_vars=['country'],
    var_name='Year',
    value_name='Emissions'
)

random_sample = CO2_emissions_long.sample(n=6, random_state = 123)
print (random_sample)
CO2_emissions_long

# clean and tidy the CO2 data further
df_co2_c = (
    CO2_emissions_long
    .rename(columns={'country': 'Country'})
    .assign(Year=lambda df: pd.to_numeric(df['Year']),
            Label="CO2 Emissions (Metric Tons)")
)

print(df_co2_c.head())

#Yearly Growth in GDP Per Capita (GDP_PC) Data Wrangling
# checking number of rows in the GDP_pc data frame
num_rows = len(df_gdp)
print(f'Number of rows: {num_rows}')
# shows 194 rows as opposed to 50688

#checking number of columns:
num_cols = len(df_gdp.columns)
print(f'Number of columns: {num_cols}')

# there's 220 country columns and a set of columns corresponding to different years
# use .melt() to change data from wide to long, this makes the data a little more tidy changes the year columns into a single column called year with its corresponding values
df_gdp_long = pd.melt(
    df_gdp,
    id_vars=['country'],
    var_name='Year',
    value_name='GDP per capita'
)

# grabbing a random sample from the GDP per capita data

random_sample = df_gdp_long.sample(n=6, random_state = 123)
print (random_sample)

# clean and tidy the GDP_pc data further
df_gdp_c = (
    df_gdp_long
    .rename(columns={'country': 'Country'})
    .assign(Year=lambda df: pd.to_numeric(df['Year']),
            Label="GDP per Capita Yearly Growth")
)

print(df_gdp_c.head())

# cleaning the Data for Energy Use per person (E_use_pp)

# use .melt() to change data from wide to long, this makes the data a little more tidy

# changes the year columns into a single column called year with its corresponding values

df_en_long = pd.melt(
    df_en,
    id_vars=['country'],
    var_name='Year',
    value_name='Energy Use PP'
)

# grabbing a random sample from the Energy use per person data

random_sample = df_en_long.sample(n=6, random_state = 123)
print (random_sample)

# clean the E_use_pp data further:
# Convert Year to an integer
# Add a new 'Label' column
# Rename the energy use column
df_en_c = (
    df_en_long
    .rename(columns={'country': 'Country'})
    .assign(
        Year=lambda df: df['Year'].astype(int),
        Label="Energy Use (kg, oil-eq./capita)"
    )
    .rename(columns={'energy_use': 'Energy'})
)
df_en_c

# setting seed for reproducibility, ensures that the random sample is the same every time you run the code.

np.random.seed(123)
#  grabbing 3 random rows from the Data frame
energy_use_sample = df_en_c.sample(n=3).reset_index(drop=True)
# showing the sample
print(energy_use_sample)

# checking unique values in Country column, showing different countries, picked first 10 for shorter demonstration

unique_countries = df_en_c['Country'].unique()
print("\nUnique countries in the dataset (first 10):")
print(unique_countries[:10])

# showing number of unique countries
unique_countries = df_en_c['Country'].unique()
print(f"\nTotal number of unique countries: {len(unique_countries)}")

#Now we're going to look at the SK specific data
# These data sets only gave us info for the SK

# Disasters Data Wrangling
# showing the data
df_nd

#Select only "Year" and "Disasters" columns
df_nd = df_nd.loc[:,["Start Year", "Disaster Type"]]
df_nd["Disasters"] = df_nd.drop("Start Year", axis = 1).sum(axis = 1)


#Add "Country", "Indicator", "Label" columns to show that data are from the U.S. disasters dataset
df_nd["Country"] = "South Korea"
df_nd["Indicator"] = "Disasters"
df_nd["Label"] = "Number of Disasters"

#Rename "Disaster" column to "Number of Disasters"
df_nd = df_nd.rename(columns = {"Start Year": "Year"})
df_nd_c = df_nd[["Country", "Year", "Indicator", "Disasters", "Label"]]
df_nd_c.head()

#Pivot temperature data to long form
df_no_identifiers = df_temp.drop(columns=['code', 'name'])
df_temp_long = df_no_identifiers.melt(var_name='year', value_name='temperature')

#Add columns "Country," "Indicator," "Label"
df_temp_long["Country"] = "South Korea"
df_temp_long["Indicator"] = "Temperature"
df_temp_long["Label"] = "Temperature (Celsius)"

#Rename columns, select first four digits of year values (and change to numeric)
df_temp_long = df_temp_long.rename(columns = {"year":"Year", "temperature":"Temperature"})
df_temp_long["Year"] = df_temp_long["Year"].str[:4].astype("int64")
df_temp_c = df_temp_long[["Country", "Year", "Indicator", "Temperature", "Label"]]
df_temp_c

# Joining the data
df_co2_c.describe()
df_gdp_c.describe()
df_en_c.describe()
df_nd_c.describe()
df_temp_c.describe()


#Why do we need this right here?

# now we combine data sets
# merge CO2 Emissions and GDP growth per capita

data_wide = pd.merge(
    left= df_co2_c,
    right= df_gdp_c,
    on=['Country', 'Year', 'Label'],
    how='outer'
)

# then merge with Energy use per person
data_wide = pd.merge(
    left=data_wide,
    right= df_en_c,
    on=['Country', 'Year', 'Label'],
    how='outer'
)

data_wide

#  set random seed for reproducibility
np.random.seed(123)
print(data_wide.sample(n=3))

# reorder the columns for aesthetic preferences
new_column_order = [
    'Country',
    'Year',
    'Emissions',
    'GDP per capita',
    'Energy Use PP',
    'Label'
]
data_wide = data_wide[new_column_order]
np.random.seed(123)
print(data_wide.sample(n=3))

#this seems repetitive since I think the columns were already in this order
data_wide

# make long version of the data and create new variable called Indicator to indicate where the data set came from
data_long = pd.melt(
    data_wide,
    id_vars=['Country', 'Year', 'Label'],
    var_name='Indicator',
    value_vars=['Emissions', 'GDP per capita', 'Energy Use PP']
)
print(data_long)
data_long

# combine this with the US Data about Disasters and Temperature
# concat automatically handles columns that don't match by filling them with NaN just in case
# convering 'Country' column to a categorical data type in pandas
data_long = pd.concat([data_long, df_nd_c, df_temp_c], ignore_index=True)
data_long['Country'] = data_long['Country'].astype('category')
print(data_long)
data_long

# show first and last 6 rows of the combined data set
print(data_long.head(6))
print(data_long.tail(6))

# create a new variable called region that will indicate if Data ifro m the SK or a different country based on the Country variable
# ex: if country variable is US then new variable's value will the SK, but if the Country variable isn't equal to SK then it will be "Rest of the World"
data_long['Region'] = np.where(
    data_long['Country'] == 'South Korea',
    'South Korea',
    'Rest of the World'
)
Final_df = data_long.sort_values(by='Country')

print(Final_df)
Final_df

# drop rows that have at least 1 NaN value
data_long_with_miss = data_long.sort_values(by='Country').reset_index(drop=True)
Final_df = data_long.dropna(subset=['value']).sort_values(by='Country').reset_index(drop=True)
print(Final_df)
Final_df

"""# Data Visualization"""

df_co2_c

# 1) The first line plot under the "adding color" subsection.
# plotting all the countries, having the SK line in blue
# data transformation: convert the wide format to long format
# data cleaning, convert data types and handle missing values
# creating plot
# loop through each country and plot its emissions data, change the US line to blue
# customizing plot
# saving plot as a png file


df_co2_c['Year'] = df_co2_c['Year'].astype("int64")
df_co2_c.dropna(inplace=True)

all_countries = df_co2_c['Country'].unique()

fig, ax = plt.subplots(figsize=(12, 8))

for country in all_countries:
    country_data = df_co2_c[df_co2_c['Country'] == country]
    if country == 'South Korea':
        ax.plot(country_data['Year'], country_data['Emissions'], color='blue', linewidth=2.5, zorder=5)
    else:
        ax.plot(country_data['Year'], country_data['Emissions'], color='black', linewidth=1.5, alpha=0.3, zorder=1)

ax.set_title('Country CO2 Emissions per Year (1751-2014)', fontsize=16)
ax.set_xlabel('Year\n Limited to reporting countries', fontsize=12)
ax.set_ylabel('Emissions (Metric Tonnes)', fontsize=12)

ax.set_facecolor('#F0F0F0')
ax.grid(color='white', linestyle='-', linewidth=1)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.ticklabel_format(axis='y', style='sci', scilimits=(0, 0))

plt.show()

plt.savefig('my_plot.png', dpi=300, bbox_inches='tight')